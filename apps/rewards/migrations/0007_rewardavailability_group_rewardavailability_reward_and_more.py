# Generated by Django 5.1.7 on 2025-04-25 19:11

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('rewards', '0006_rewardavailability_and_more'),
        ('student_groups', '0001_initial'),
        ('users', '0003_registrationtoken'),
    ]

    operations = [
        migrations.AddField(
            model_name='rewardavailability',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reward_availabilities', to='student_groups.studentgroup', verbose_name='Gruppo'),
        ),
        migrations.AddField(
            model_name='rewardavailability',
            name='reward',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='rewards.reward', verbose_name='Ricompensa'),
        ),
        migrations.AddField(
            model_name='rewardavailability',
            name='student',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reward_availabilities', to='users.student', verbose_name='Studente (Individuale)'),
        ),
        migrations.DeleteModel(
            name='RewardStudentSpecificAvailability',
        ),
        migrations.AddConstraint(
            model_name='rewardavailability',
            constraint=models.CheckConstraint(condition=models.Q(('student__isnull', False), ('group__isnull', False), _connector='OR'), name='reward_availability_target_not_null', violation_error_message='La disponibilità della ricompensa deve avere uno studente o un gruppo.'),
        ),
        migrations.AddConstraint(
            model_name='rewardavailability',
            constraint=models.CheckConstraint(condition=models.Q(('student__isnull', False), ('group__isnull', False), _negated=True), name='reward_availability_target_exclusive', violation_error_message='La disponibilità della ricompensa non può avere sia uno studente che un gruppo.'),
        ),
        migrations.AlterUniqueTogether(
            name='rewardavailability',
            unique_together={('reward', 'group'), ('reward', 'student')},
        ),
    ]
