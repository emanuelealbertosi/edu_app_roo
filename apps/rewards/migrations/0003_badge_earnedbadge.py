# Generated by Django 5.1.7 on 2025-04-07 05:21

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('rewards', '0002_alter_reward_metadata_alter_rewardtemplate_metadata'),
        ('users', '0002_student_pin_hash_student_student_code'),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Badge Name')),
                ('description', models.TextField(help_text='Spiega come ottenere questo badge.', verbose_name='Description')),
                ('image_url', models.URLField(blank=True, help_text="URL dell'immagine del badge (es. SVG, PNG).", null=True, verbose_name='Image URL')),
                ('trigger_type', models.CharField(choices=[('QUIZ_COMPLETED', 'Quiz Completed'), ('PATHWAY_COMPLETED', 'Pathway Completed'), ('CORRECT_STREAK', 'Correct Answer Streak'), ('POINTS_THRESHOLD', 'Points Threshold Reached')], help_text="L'evento che può sbloccare questo badge.", max_length=30, verbose_name='Trigger Type')),
                ('trigger_condition', models.JSONField(blank=True, default=dict, help_text='Condizioni specifiche. Es: {"min_score": 80} per QUIZ_COMPLETED, {"streak_length": 5} per CORRECT_STREAK, {"points": 1000} per POINTS_THRESHOLD.', verbose_name='Trigger Condition')),
                ('is_active', models.BooleanField(default=True, help_text='Se il badge può essere attualmente ottenuto.', verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EarnedBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True, verbose_name='Earned At')),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_by_students', to='rewards.badge', verbose_name='Badge')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_badges', to='users.student', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Earned Badge',
                'verbose_name_plural': 'Earned Badges',
                'ordering': ['-earned_at'],
                'unique_together': {('student', 'badge')},
            },
        ),
    ]
