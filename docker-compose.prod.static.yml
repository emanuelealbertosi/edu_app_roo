# File Docker Compose statico.
# Si aspetta che le variabili siano definite in un file .env.prod
# usato con l'opzione --env-file nel comando 'docker compose up'.
services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env.prod # Legge le variabili da .env.prod
    healthcheck:
      # Usa la sintassi $$ per leggere le variabili dall'ambiente del container
      # popolate da env_file
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    # Assicurati che questa immagine sia corretta e aggiornata su Docker Hub
    image: albertosiemanuele/edu-app-backend:latest
    ports:
      - "8000:8000"
    env_file:
      - .env.prod # Legge le variabili da .env.prod
    depends_on:
      db:
        condition: service_healthy
    volumes: # Aggiunta mappatura volume media
      - media_data:/app/mediafiles
    restart: unless-stopped

  frontend-student:
    # Assicurati che questa immagine sia corretta e aggiornata su Docker Hub
    image: albertosiemanuele/edu-app-frontend-student:latest
    ports:
      - "5175:80"
    depends_on:
      - backend
    volumes: # Aggiunto volume media per servire file
      - media_data:/usr/share/nginx/media
    restart: unless-stopped

  frontend-teacher:
    # Assicurati che questa immagine sia corretta e aggiornata su Docker Hub
    image: albertosiemanuele/edu-app-frontend-teacher:latest
    ports:
      - "5174:80"
    depends_on:
      - backend
    volumes: # Aggiunto volume media per servire file
      - media_data:/usr/share/nginx/media
    restart: unless-stopped

volumes:
  postgres_data:
  media_data: {} # Aggiunta definizione volume media