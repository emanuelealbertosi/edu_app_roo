# File Docker Compose statico.
# Si aspetta che le variabili siano definite in un file .env.prod
# usato con l'opzione --env-file nel comando 'docker compose up'.
services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env.localprod # Legge le variabili da .env.localprod
    healthcheck:
      # Usa la sintassi $$ per leggere le variabili dall'ambiente del container
      # popolate da env_file
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    # Costruisce l'immagine localmente usando il Dockerfile nella root
    build:
      context: .
      dockerfile: Dockerfile # Assicurati che il Dockerfile del backend sia nella root
    # ports: # Rimosso, accesso tramite nginx-proxy
    #  - "8000:8000"
    env_file:
      - .env.localprod # Legge le variabili da .env.localprod
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - media_data:/app/mediafiles # Volume per i file caricati dagli utenti
      - static_data:/app/staticfiles # Volume per i file statici raccolti
    restart: unless-stopped

  frontend-student:
    # Costruisce l'immagine localmente usando il Dockerfile in frontend-student/
    build:
      context: ./frontend-student
      dockerfile: Dockerfile
    # ports: # Rimosso, accesso tramite nginx-proxy
    #  - "5175:80"
    depends_on:
      - backend
    volumes: # Aggiunto volume media per servire file
      - media_data:/usr/share/nginx/media
    restart: unless-stopped

  frontend-teacher:
    # Costruisce l'immagine localmente usando il Dockerfile in frontend-teacher/
    build:
      context: ./frontend-teacher
      dockerfile: Dockerfile
    # ports: # Rimosso, accesso tramite nginx-proxy
    #  - "5174:80"
    depends_on:
      - backend
    volumes: # Aggiunto volume media per servire file
      - media_data:/usr/share/nginx/media
    restart: unless-stopped

  frontend-lessons:
    # Costruisce l'immagine localmente usando il Dockerfile in frontend-lessons/
    build:
      context: ./frontend-lessons
      dockerfile: Dockerfile
      # Rimosso args: VITE_API_BASE_URL - si affider√† al proxy Nginx e al baseURL relativo
    depends_on:
      - backend
    volumes: # Aggiunto volume media per servire file (se necessario)
      - media_data:/usr/share/nginx/media
    restart: unless-stopped

  nginx-proxy:
    image: nginx:alpine
    ports:
      - "80:80" # Espone la porta 80 dell'host
    volumes:
      # Monta la configurazione Nginx creata separatamente
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # Monta i media per servirli direttamente da Nginx
      - media_data:/usr/share/nginx/media:ro
      # Monta gli statici raccolti per servirli direttamente da Nginx
      - static_data:/usr/share/nginx/static:ro
      # Monta l'index.html statico
      - ./index.html:/usr/share/nginx/html/index.html:ro
    depends_on:
      - backend
      - frontend-student
      - frontend-teacher
      - frontend-lessons # Aggiunta dipendenza
    restart: unless-stopped

volumes:
  postgres_data:
  media_data: {}
  static_data: {} # Volume per i file statici