services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env.prod # Carica variabili d'ambiente specifiche per la produzione
    environment:
      # Assicurati che queste variabili siano definite nel tuo .env.prod
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped # Riavvia il DB se si ferma inaspettatamente

  backend: # Rinominato da 'web' per chiarezza
    image: albertosiemanuele/edu-app-backend:latest # Usa l'immagine da Docker Hub
    # Non montare volumi di codice in produzione
    # volumes:
    #   - .:/app
    ports:
      - "8000:8000" # Mappa la porta di Gunicorn
    env_file:
      - .env.prod # Carica variabili d'ambiente specifiche per la produzione
    environment:
      # Assicurati che queste variabili siano definite nel tuo .env.prod
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG} # Dovrebbe essere False in produzione
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS} # Configura gli host permessi per la produzione
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS} # Configura gli origin permessi per la produzione
      # Credenziali Superuser per lo script di entrypoint
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
    depends_on:
      db:
        condition: service_healthy # Attende che il DB sia pronto
    # Il comando viene gestito dall'ENTRYPOINT definito nel Dockerfile (che creeremo/modificheremo)
    # command: ... (Rimosso)
    restart: unless-stopped # Riavvia il backend se si ferma inaspettatamente

  frontend-student:
    image: albertosiemanuele/edu-app-frontend-student:latest # Usa l'immagine da Docker Hub
    ports:
      - "5175:80" # Mappa la porta di Nginx
    depends_on:
      - backend # Dipende dal backend
    restart: unless-stopped

  frontend-teacher:
    image: albertosiemanuele/edu-app-frontend-teacher:latest # Usa l'immagine da Docker Hub
    ports:
      - "5174:80" # Mappa la porta di Nginx
    depends_on:
      - backend # Dipende dal backend
    restart: unless-stopped

volumes:
  postgres_data: # Volume nominato per persistere i dati del database