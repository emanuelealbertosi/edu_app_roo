services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env.prod # Specifica solo env_file
    # Rimuoviamo la sezione environment ridondante
    # environment:
    #   - POSTGRES_DB=${POSTGRES_DB}
    #   - POSTGRES_USER=${POSTGRES_USER}
    #   - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      # Usiamo $$ per passare le variabili lette da env_file alla shell dell'healthcheck
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    image: albertosiemanuele/edu-app-backend:latest
    ports:
      - "8000:8000"
    # Specifica solo env_file per caricare le variabili
    env_file:
      - .env.prod
    # Rimuoviamo la sezione environment; le variabili verranno da .env.prod
    # environment:
    #   - SECRET_KEY=${SECRET_KEY}
    #   - DEBUG=${DEBUG}
    #   - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    #   - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
    #   - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    #   - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
    #   - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
    #   - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  frontend-student:
    image: albertosiemanuele/edu-app-frontend-student:latest
    ports:
      - "5175:80"
    depends_on:
      - backend
    restart: unless-stopped

  frontend-teacher:
    image: albertosiemanuele/edu-app-frontend-teacher:latest
    ports:
      - "5174:80"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data: