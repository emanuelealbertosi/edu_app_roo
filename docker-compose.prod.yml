services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    # Rimuoviamo env_file e usiamo environment esplicito
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      # Usiamo la sostituzione diretta di Docker Compose
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    image: albertosiemanuele/edu-app-backend:latest
    # ports: # Rimosso, accesso tramite nginx-proxy
    #  - "8000:8000"
    # Rimuoviamo env_file e usiamo environment esplicito
    environment:
      DATABASE_URL: ${DATABASE_URL} # Aggiunta nello script deploy
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      # Aggiungiamo anche le variabili DB qui, anche se non strettamente necessarie
      # per Django (che usa DATABASE_URL), potrebbero servire ad altri tool
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    volumes: # Aggiunta mappatura volume media
      - media_data:/app/mediafiles
    restart: unless-stopped

  frontend-student:
    image: albertosiemanuele/edu-app-frontend-student:latest
    # ports: # Rimosso, accesso tramite nginx-proxy
    #  - "5175:80"
    depends_on:
      - backend
    volumes: # Aggiunto volume media per servire file
      - media_data:/usr/share/nginx/media
    restart: unless-stopped

  frontend-teacher:
    image: albertosiemanuele/edu-app-frontend-teacher:latest
    # ports: # Rimosso, accesso tramite nginx-proxy
    #  - "5174:80"
    depends_on:
      - backend
    volumes: # Aggiunto volume media per servire file
      - media_data:/usr/share/nginx/media
    restart: unless-stopped

  nginx-proxy:
    image: nginx:alpine
    ports:
      - "80:80" # Espone la porta 80 dell'host
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro # Monta la configurazione Nginx
      - ./index.html:/usr/share/nginx/html/index.html:ro # Monta la homepage statica
      - media_data:/usr/share/nginx/media:ro # Monta i media per servirli direttamente
    depends_on:
      - backend
      - frontend-student
      - frontend-teacher
    restart: unless-stopped

volumes:
  postgres_data:
  media_data: {} # Aggiunta definizione volume media