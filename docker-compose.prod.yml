services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env.prod # Specifica solo env_file
    # Rimuoviamo la sezione environment ridondante
    healthcheck:
      # Usiamo $$ per passare le variabili lette da env_file alla shell dell'healthcheck
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    image: albertosiemanuele/edu-app-backend:latest
    ports:
      - "8000:8000"
    # Specifica env_file per caricare TUTTE le variabili nell'ambiente del container
    env_file:
      - .env.prod
    # Definiamo ESPLICITAMENTE solo DATABASE_URL qui, usando l'interpolazione
    # delle variabili che DOVREBBERO essere state caricate da .env.prod.
    # settings.py leggerà le altre variabili (SECRET_KEY, DEBUG, etc.) direttamente
    # dall'ambiente via os.getenv().
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      # Le altre variabili (SECRET_KEY, DEBUG, ALLOWED_HOSTS, CORS, SUPERUSER_*)
      # sono già nell'ambiente grazie a env_file e verranno lette da settings.py
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  frontend-student:
    image: albertosiemanuele/edu-app-frontend-student:latest
    ports:
      - "5175:80"
    depends_on:
      - backend
    restart: unless-stopped

  frontend-teacher:
    image: albertosiemanuele/edu-app-frontend-teacher:latest
    ports:
      - "5174:80"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data: